"""Node modules and global npm package scanners."""
from __future__ import annotations

import json
import logging
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple

from scripts.scan_core.models import Finding
from scripts.scan_core.utils import load_json, check_version_match, normalize_version, create_namespace_warning

LOGGER = logging.getLogger("shai-hulud")


def scan_installed_package(package_json: Path, warn_namespaces: bool = True) -> List[Finding]:
    """Scan an installed package's package.json for compromised version."""
    data = load_json(package_json)
    if not data:
        return []

    name = data.get("name")
    version = data.get("version")
    if not (isinstance(name, str) and isinstance(version, str)):
        return []

    if check_version_match(name, version):
        match = normalize_version(version) or version
        return [
            Finding(
                package=name,
                version=match,
                source=str(package_json),
                evidence="installed module package.json",
            )
        ]

    if warn_namespaces:
        namespace_warnings_seen = set()
        warning = create_namespace_warning(
            name, normalize_version(version) or version, str(package_json), namespace_warnings_seen
        )
        if warning:
            return [warning]

    return []


def scan_global_npm() -> Tuple[List[Finding], int]:
    """Scan globally installed npm packages."""
    cmd = ["npm", "ls", "-g", "--depth=0", "--json"]
    try:
        result = subprocess.run(cmd, check=False, capture_output=True, text=True)
    except FileNotFoundError:
        LOGGER.warning("npm executable not found; skipping global package scan.")
        return [], 0

    if result.returncode not in (0, 1):
        LOGGER.warning("npm ls exited with status %s; output may be incomplete.", result.returncode)

    try:
        parsed = json.loads(result.stdout or "{}")
    except json.JSONDecodeError as exc:
        LOGGER.warning("Unable to parse npm ls output: %s", exc)
        return [], 0

    findings: List[Finding] = []
    inspected = 0

    def walk(deps: Dict[str, object], context: str) -> None:
        nonlocal inspected
        for name, meta in deps.items():
            if not isinstance(meta, dict):
                continue
            inspected += 1
            version = meta.get("version")
            if isinstance(version, str) and check_version_match(name, version):
                findings.append(
                    Finding(
                        package=name,
                        version=normalize_version(version) or version,
                        source="npm-global",
                        evidence=f"{context}:{name}",
                    )
                )
            nested = meta.get("dependencies")
            if isinstance(nested, dict):
                walk(nested, context=f"{context}/{name}")

    dependencies = parsed.get("dependencies")
    if isinstance(dependencies, dict):
        walk(dependencies, context="global")

    return findings, inspected
